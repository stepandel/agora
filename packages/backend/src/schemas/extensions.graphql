extend type Proposal {
  title: String!
  number: Int!
  totalValue: BigInt!
  totalVotes: BigInt!
  createdBlockGovernance: Governance!
  voteStartsAt: BigInt!
  voteEndsAt: BigInt!
  actualStatus: ActualProposalStatus!
}

enum ActualProposalStatus {
  PENDING
  ACTIVE
  CANCELLED
  VETOED
  QUEUED
  EXECUTED
  DEFEATED
  EXPIRED
}

extend type Account {
  address: Address!
}

extend type Delegate {
  address: Address!
  resolvedName: ResolvedName!
  voteSummary: DelegateVotesSummary!
  propHouseVotes: [PropHouseAuctionVotes!]!
}

type PropHouseAuctionVotes {
  id: ID!
  address: Address!
  createdAt: BigInt!

  round: PropHouseAuction!
  votes: [PropHouseAuctionVote!]!
}

type PropHouseAuction {
  id: ID!
  title: String!
  number: Int!
  description: String!
  startTime: String!
  proposalEndTime: String!
  votingEndTime: String!
  status: PropHouseAuctionStatus!

  numProposals: Int!
  numWinners: Int!
  fundingAmount: String!
  currencyType: String!

  proposals: [PropHouseProposal!]!
  votes: [PropHouseAuctionVote!]!
}

enum PropHouseAuctionStatus {
  PENDING
  PROPOSING
  ACTIVE
  EXECUTED
}

type PropHouseAuctionVote {
  address: Address!
  proposal: PropHouseProposal!
  weight: Int!
}

type PropHouseProposal {
  id: ID!
  number: Int!
  title: String!
  tldr: String!
  voteCount: Int!
  createdDate: String!

  proposer: Address!
}

extend type Vote {
  createdAt: BigInt
}

extend type Noun {
  number: Int!
}

type DelegateVotesSummary {
  forVotes: Int!
  againstVotes: Int!
  abstainVotes: Int!
  totalVotes: Int!
}

type Query {
  metrics: OverallMetrics!
  address(addressOrEnsName: String!): Address!

  propHouseAuctions: [PropHouseAuction!]!
}

type Address {
  resolvedName: ResolvedName!
  account: Account
  wrappedDelegate: WrappedDelegate!
  isContract: Boolean!
}

type OverallMetrics {
  proposalThresholdBPS: BigInt!
  quorumVotesBPS: BigInt!
}

type ResolvedName {
  address: ID!
  name: String
}

type WrappedDelegate {
  id: ID!
  address: Address!
  statement: DelegateStatement
  delegate: Delegate
}

type DelegateStatement {
  statement: String!
  summary: String
  topIssues: [TopIssue!]!
  mostValuableProposals: [Proposal!]!
  leastValuableProposals: [Proposal!]!
  twitter: String!
  discord: String!
  openToSponsoringProposals: Boolean
}

type TopIssue {
  type: String!
  value: String!
}

type Mutation {
  createNewDelegateStatement(
    data: CreateNewDelegateStatementData
  ): WrappedDelegate!
}

input CreateNewDelegateStatementData {
  statement: ValueWithSignature!
  email: ValueWithSignature
}

input ValueWithSignature {
  # Address of the signer, this is used for logging and so we can implement
  # gnosis wallet multi-sig signature verification.
  signerAddress: String!
  value: String!
  signature: String!
}

enum WrappedDelegatesWhere {
  withStatement
  seekingDelegation
}

enum WrappedDelegatesOrder {
  mostRelevant
  mostNounsRepresented
  mostRecentlyActive
  mostVotesCast
  leastVotesCast
}

type Query {
  wrappedDelegates(
    where: WrappedDelegatesWhere
    orderBy: WrappedDelegatesOrder! = mostNounsRepresented
    first: Int!
    after: String
  ): WrappedDelegatesConnection!
  currentGovernance: Governance!

  propHouseAuction(auctionId: String!): PropHouseAuction!
}

type WrappedDelegatesConnection {
  pageInfo: PageInfo!
  edges: [WrappedDelegatesEdge!]!
}

type WrappedDelegatesEdge {
  node: WrappedDelegate!
  cursor: String!
}

type PageInfo {
  count: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}
